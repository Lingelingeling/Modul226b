Documentation of progress:

Idea:
We wanted to create a managing tool. since we both don't know much about sports we chose something randomly.
Thats how we came to basketball. We did some research on teams and positions of the players, aswell as how they could be trained. 
E.g. a basketball-player needs to be fast so you can train their pace, whereas training them to hold their breath longer wouldn't make much sense. 

-------------------------

Procedure:
First, we designed our project. We wrote use Cases and a class diagram, the sequence diagram was later on adapted by Belinda ST.
Both of us worked on the use cases, since there are quite a few of them. We also asked for some advice for additional Use cases and Test Cases from our classmates,
so we could really get all the cases we could think of. 

Next Step:
Next, we assigned some tasks. We knew, both of us should work on methods aswell as newer things like interfaces or abstract classes.
In every file, you can see the Main-Author of this file. Both of us worked on the other files a bit aswell, if there were any complications
or incompatibilities we needed to fix. 

Next Step:
After the first steps of our program, we needed to cut it down a bit, since we didn't have an infinite amount of time.
That's why we don't have every position of an actual basketball team adapted. Also, the names of the players are definitely not real, researching all this
needed information would've taken way too much time. 

Next Step:
We also had to change some things in our diagrams. So they are not the original first ones, but maybe version 2 or 3.
The Use- and Test-Cases are filed in this repository: Modul226b/M226b_BasketballManager/Additionals
The Diagrams are filed at the same place but in an additional folder: ../Additionals/Diagrams

Next Step:
Comments of our code was written in the end. That was one of our last steps in this project. 

--------------------------

What we learned:
We learned how to use abstract classes, since we have never used these at work or in school before. We also learned how to structurize our code correctly.
We were used to mainly program in one or very few files. 

--------------------------

Problems:
We mainly had problems with the scanners, which caused our program to collapse. this happened in our mainfile. 
We managed to solve this after some minor complications. We learned, that after closing scanners they couldn't be used again, even with new scanners in other functions. 
Asides from this, the JUnit tests didn't work quite as we wanted them to. We also didn't have enough time to write enough tests for every single function in our project.
We also got under some pressure in the end, since we slacked off a little bit at the beginning. After that we started to work on this project much more 
seriously, which worked after some additional working at home. 

